- Implemented the std statistics function, that calculates the standard
  deviation of a particular ndhist axis.

- Implemented the var statistics function, that calculates the variance of a
  particular ndhist axis.

- Implemented the median statistics function, that calculates the median value
  of a particular ndhist axis.

- Generalized the mean statistics function into the moment statistics function.
  The mean is defined as just the first moment.

- Added the ``stats`` python module holding utility functions for calculating
  statistics quantities from a ndhist object. For now only the ``mean`` function
  exists.

- Added histsave and histload C++ functions to save/load ndhist C++ objects to
  HDF files. It calls the Python function histsave and histload implemented in
  the storage.py python module of the ndhist package.

- Added the ``storage`` Python module to save/load a ndhist object to a HDF
  file from Python.

- Added the ndhist properties ``full_binentries``, ``full_bincontent``, and
  ``full_squaredweights``, that return ndarrays including possible under- and
  overflow bins. These properties are useful for later storage of the entire
  histogram to a file.

- When creating a ndhist object, make sure, that the given axis objects are
  unique objects. If not, make them unique.

- Implemented the ``ndzip`` utility function for creating structured ndarrays
  for filling of high dimensional histograms in a convienient way.

- Implement the fill procedure also for a structured ndarray
  given as ndvalues object. (generic_nd_traits) The fill code is generalized and
  is used by both methods to avoid code repetition.

- Implemented the binerror ndhist property, that is just the square root value
  of the sum of weights squared values.

- Implemented the lower_binedges Axis property.

- Implemented the upper_binedges Axis property.

- Added unit test for the constant_bin_width_axis Axis class.

- Adjusted the fill method so the user can pass a scalar to the ndvalues
  argument if the ndhist object is a 1-dimensional histogram. A series of values
  to fill into a 1-dimensional histogram can be passed as a single list of
  these values, a 1-dimensional ndarray of these values or a tuple with one
  element holding either a scalar of the values to fill or a list or ndarray of
  values to fill.

- Implemented ndhist's clear() method, that sets all bin content values to zero.
  If the ndhist object is a view, only the bins visible by the view are set to
  zero. This allows selective clearing.

- Renamed the rebin and rebin_axis method into merge_bins and merge_axis_bins,
  because that's what it is actually doing.
  It might be possible to implement an actual rebin method in the future, when
  the ndhist object would have a data source assigned for refilling the
  histogram.

- Implemented unit test for ndhist's rebin_axis method for 2D histograms.

- Implemented the rebin method of the ndhist class, that can take bp::tuple
  (or std::vector<intptr_t>) objects for the axis and nbins_to_merge arguments
  in order to operate on several axes.

- Introduced the copy=True kwarg to ndhist's rebin_axis method. If set to
  ``True``, a deepcopy of the ndhist object is created first and the rebin
  operation is performed on that copy. The default is ``True`` in order to have
  by default the same behaviour as dashi's rebin_axis method.

- Zero bins, that would be discarded by ndhist's rebin_axis method when the axis
  is extendable and the nbins_to_merge is not a true divisor of the number of
  bins of the axis. Otherwise such bins would have a pre-set value when the axis
  gets extended after the rebin operation.

- Implemented the ndhist rebin_axis(axis, nbins_to_merge) method that changes
  the current ndhist object, if the current ndhist object is not a view. If it
  is a view, a deep copy is created first.
  The rebin_axis method returns a reference to the changed ndhist object.

  The reason for letting rebin_axis operate on the ndhist object itself is the
  fact, that this operation can be done very efficiently without the need of
  a copy of all the data. In principle rebin_axis could take a kwarg named
  copy=True, that would call the deepcopy() method first if needed. This would
  mimic the behavior of dashi, that always creates a copy when rebinning.
  In principle, rebin_axis could also take a tuple for axis and nbins_to_merge
  and could rebin several axes at once.

- Implemented unit tests for basic slicing.

- Implemented unit tests for ndhist's deepcopy method.

- Implemented the ndhist.deepcopy() method. It creates a copy of the ndhist
  object. It also copies the underlaying data, i.e. a ndhist view becomes an
  ordinary ndhist object.

- Added the Axis properties has_underflow_bin and has_overflow_bin and adjusted
  the implementation of the derived axis classes and ndhist.
  The reasoning behind these two properties is the proper behaviour of the
  constant_bin_width_axis class, especially when creating slice histograms.
  A slice histogram could hold only a single bin (i.e. the under- or overflow
  bin). Since edge values of under- and overflow bins could be special values
  (e.g. -inf or +inf), special care has to be taken when dealing with those
  bins. The new properties (that replace the has_oor_bins property) define if
  an axis contains an underflow and/or overflow bin.

- Introduced interface via static function calls to the ValueCacheBase class,
  thus methods can be called when only holding a base class pointer.

- Implemented the copy constructor for detail::ndarray_storage that copies also
  the bytearray.

- Implemented copy constructor for the Axis class and its derived classes, i.e.
  constant_bin_width_axis and generic_axis.

- Added pybindings for label to the Axis class.

- Added pybindings for binedges, bincenter, and binwidths to the Axis class.

- Implemented the binwidths property of ndhist (w/o the under and overflow
  bins).

- Make the addition of oor bins optional in the axes utility functions.

- Implemented the bincenters property of ndhist (w/o the possible under and
  overflow bins).

- Drop support for integer axis values, because bin centers cannot be
  represented by integer values.

- Adjusted the binedges property to exclude possible under- and overflow bins.

- Implemented the *base* property of ndhist that refers to the ndhist object
  when the ndhist object is a view into that. This maked the owner property of
  ndarray_storage obsolete. This is actually important for object bin arrays,
  where the elements need to be deref'ed by the correct ndhist object, ie. the
  base.

- Scalarized the return value of binentries, bincontent, and squaredweights
  properties if the ndhist object is a zero-dimensional histogram.

- Implemented the basic slicing of ndhist according to numpy basic slicing
  rules. Basic slicing produces always a data view. Thus, ndhist objects that
  are views (can be checked through the *is_view* property), don't have under-
  and overflow bins. Although, they might be views into the original under- and
  overflow bins. In case the ndhist is a data view, the *base* property is set
  to that ndhist object.

- Reimplemented the project method of the ndhist class to handle the new
  out-of-range bin scheme.

- Overloaded the arithmetic operators of the ndhist class for all (excluding
  boost::python::object) supported weight types.

- Implemented the unit test "oor_bin_copies_test" to actually check if the
  underflow, etc. properties of ndhist return deep copies.

- If the bin content array is an object array, the underflow, overflow,
  underflow_squaredweights, and overflow_squaredweights properties of ndhist
  make a deepcopy (using BoostNumpy's ndarray.deepcopy method) of their returned
  ndarrays, so that the objects are also copied.

- The properties
      - underflow,
      - overflow,
      - underflow_entries,
      - overflow_entries,
      - underflow_squaredweights,
      - overflow_squaredweights
  of ndhist return copies of the underflow and overflow bins, because if the
  extendable axes extend, those out-of-range bins will become core bins. In case
  the user really needs views into the internal bin content array, one should
  use the corrsponding *_view properties, e.g. underflow_view.

- The methods
      - py_get_noe_ndarray,
      - py_get_sow_ndarray and
      - py_get_sows_ndarray
  return ndarrays that are views into the core (i.e. excluding under- and
  overflow bins) bin content array of the histogram.

- Reserved (virtual) under- and overflow bins within the front and back
  capacities of the bin content array for extendable axes. So an actual view
  into the bin content array can be created for ndarrays returned by the
  underflow and overflow properties of ndhist.
  The under and overflow bins of non-extendable axes are now also included in
  the bin content array. So the binentries, bincontent and squaredweights
  properties are creating a view into the bin content array showing only the
  core array, i.e. without the under- and overflow bins.

- Adjusted the fill method to the new oor bin scheme. It still needs to be
  tested.

- Integrated get_noor_bin into bin_utils as get_bin_by_indices function.

- Renamed flush_oor_cache function to flush_value_cache.

- Renamed the oor_fill_record_stack template to value_cache.

- Renamed detail::nd_traits to detail::specific_nd_traits, which is a better
  name in combination with the generic_nd_traits template.

- Renamed bin_value_type_traits to bin_iter_value_type_traits and moved it from
  ndhist.cpp into its own header file.

- Renamed the bc_value_traits template to bin_utils and move it into its own
  header file.

- Moved the bin_value template from ndhist.cpp into its own header file.

- Added the python utility (factory) functions ``ndhist.axes.linear`` and
  ``ndhist.axes.linear_bins`` to create axes with linear bin space and constant
  bin widths. These functions return the actual ``ndhist.core.axis`` object
  needed to create a ``ndhist.core.ndhist`` object.

- Introduced the ``build_python_package`` make target to build the ndhist python
  package within the build tree. This way updates in the python code part can
  be tested much more easier without the need of recompiling the C++ code.

- Make the python package installation more flexible by introducing the
  ``--user`` option to the ``configure`` script. If this option is not
  specified, the python package will be installed in a directory relative to the
  ``--prefix`` option. In cases where ``--prefix`` is set to ``/usr`` or
  ``/usr/local``, the package will be installed into the system's python package
  repository.

- Developed a setuptools installation script for the Python package "ndhist", so
  it gets installed either within the ``--prefix`` directory, or into the python
  dist-packages directory located in the user's home directory under
  ``.local/``. So the user does not have to set the PYTHONPATH environment
  variable manually.

- Adapted the ndhist constructor to use a tuple of Axis objects.

- Added pybindings for GenericAxis.

- Added --boostnumpy-include-path and --boostnumpy-library-path as options
  to the configure script, which are passed on to cmake with the environment
  variables BOOSTNUMPY_INCLUDE_PATH and BOOSTNUMPY_LIBRARY_PATH, respectively.
  This way the BoostNumpy installation can be found when it is installed at a
  costum place.

- Renamed the "ndhist" python module to "core", in order to prevent name
  clashes with the future python module "ndhist" implemented in Python.
  This makes it also possible to run "make test" before "make install".

- Added first test that checks the nbins property of an axis and a ndhist
  object.

- Implemented a test facility with ctest.

- Added pybindings for the ConstantBinWidthAxis class.

- Added pybindings for the Axis class.
